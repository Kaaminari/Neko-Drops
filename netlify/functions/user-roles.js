const fetch = require('node-fetch');

exports.handler = async (event, context) => {
  // CORS CORRIGIDO
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-netlify-headers',
    'Access-Control-Allow-Methods': 'GET, OPTIONS',
    'Access-Control-Allow-Credentials': 'true'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  try {
    console.log('üîç Iniciando verifica√ß√£o de user-roles...');
    
    const authHeader = event.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return {
        statusCode: 401,
        headers,
        body: JSON.stringify({ error: 'Token de acesso necess√°rio' })
      };
    }

    const userToken = authHeader.replace('Bearer ', '');
    console.log('üîë Token do usu√°rio recebido');

    // Verificar usu√°rio no Discord
    const userResponse = await fetch('https://discord.com/api/users/@me', {
      headers: { Authorization: `Bearer ${userToken}` }
    });

    if (!userResponse.ok) {
      console.log('‚ùå Token de usu√°rio inv√°lido');
      return {
        statusCode: 401,
        headers,
        body: JSON.stringify({ error: 'Token inv√°lido' })
      };
    }

    const userData = await userResponse.json();
    console.log('üë§ Usu√°rio:', userData.username);
    
    // VERIFICA√á√ÉO CR√çTICA - VARI√ÅVEL CORRETA
    const botToken = process.env.DISCORD_BOT_TOKEN; // ‚Üê CORRIGIDO
    if (!botToken) {
      console.log('‚ùå FALTA: DISCORD_BOT_TOKEN no environment');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'Erro de configura√ß√£o do servidor' })
      };
    }

    // Verificar cargos no servidor
    console.log('üõ°Ô∏è Usando bot token para verificar cargos...');
    const memberResponse = await fetch(
      `https://discord.com/api/guilds/${process.env.SERVER_ID}/members/${userData.id}`,
      { 
        headers: { 
          Authorization: `Bot ${botToken}` // ‚Üê VARI√ÅVEL CORRIGIDA
        } 
      }
    );

    console.log('üìä Status da resposta do servidor:', memberResponse.status);
    
    if (!memberResponse.ok) {
      console.log('‚ùå Usu√°rio n√£o est√° no servidor');
      return {
        statusCode: 403,
        headers,
        body: JSON.stringify({ error: 'Usu√°rio n√£o est√° no servidor' })
      };
    }

    const memberData = await memberResponse.json();
    const userRoles = memberData.roles || [];
    
    console.log('üéØ Cargos do usu√°rio:', userRoles);
    
    const isMember = userRoles.includes(process.env.MEMBER_ROLE_ID);
    const isVip = userRoles.includes(process.env.VIP_ROLE_ID);
    
    console.log('‚úÖ Login bem-sucedido para:', userData.username);
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        userId: userData.id,
        username: userData.username,
        avatar: userData.avatar,
        roles: userRoles,
        isMember,
        isVip,
        canAccess: isMember
      })
    };

  } catch (error) {
    console.error('üí• Erro na fun√ß√£o user-roles:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Erro interno do servidor' })
    };
  }
};
